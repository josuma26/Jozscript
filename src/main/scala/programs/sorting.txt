
import lists;

def smallerThanAll[T](x: T, l: List[T], comp: (T -> T-> Bool)): Bool := {
    foldr[T][Bool](l)(true)(lambda y:T, lambda r: Bool, r && comp(x)(y))
};

def sorted[T](l: List[T], comp: (T -> T -> Bool)): Bool := {
    match l with {
        | nil:u => true
        | cons:[first, rest] => smallerThanAll[T](first)(rest)(comp) && sorted[T](rest)(comp)
    }
};

def insert[T](l: List[T], x: T, comp: (T -> T -> Bool)): List[T] := {
    match l with {
        | nil:u => singleton[T](x)
        | cons:[first, rest] => match comp(first)(x) with {
            | true => cons[T](first)(insert[T](rest)(x)(comp))
            | false => cons[T](x)(l)
        }
    }
};


def subset[T](l1: List[T], l2: List[T], comp: (T -> T -> Bool)): Bool := {
    match l1 with {
        | nil:u => true
        | cons:[first, rest] => contains[T](l2)(first)(comp) && subset[T](rest)(l2)(comp)
    }
};

def permutation[T](l1: List[T], l2: List[T], comp: (T -> T -> Bool)): Bool := {
    subset[T](l1)(l2)(comp) && subset[T](l2)(l1)(comp)
};


#![True]
def sort[T](L: List[Nat], comp: (T -> T -> Bool)): List[T] := {
    let l := L;

    let sortedList := empty[T];

    while (isNotEmpty[T](l)) #![(sorted[T](sortedList)(c) = true) /\ (subset[T](append[T](sortedList)(l))(L)(c) = true)
        /\ (subset[T](L)(append[T](l)(sortedList))(c) = true)] do {
        match l with {
            | cons:[first, rest] => {
                let l := rest;
                let sortedList := insert[T](sortedList)(first)(c)
            }
        }
    };
    sortedList
}#![(sorted[T](sortedList)(c) = true) /\ (permutation[T](sortedList)(L)(c) = true)]
