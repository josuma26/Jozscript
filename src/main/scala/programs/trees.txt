
type Tree := forall T, {leaf:T, node:[T*Tree[T]*Tree[T]]};

let ltLeaf := leaf:2 as Tree[Nat];
let gtLeaf := leaf:5 as Tree[Nat];
let treeEx := node:[3, ltLeaf, gtLeaf] as Tree[Nat];

def treePred[T](tree: Tree[T], pred: T -> Bool): Bool := {
    match tree with {
        | leaf:t => pred(t)
        | node:[val, left, right] => pred(val) && treePred[T](left)(pred) && treePred[T](right)(pred)
    }
};

def isBST[T](tree: Tree[T], isLessThan: T -> T -> Bool): Bool := {
    match tree with {
        | leaf:t => true
        | node:[val, left, right] => (
            treePred[T](left)(lambda x:T, isLessThan(x)(val))
            &&
            treePred[T](right)(lambda x:T, isLessThan(val)(x))
        )
    }
};

(let numcomp := lambda x:Nat, lambda y:Nat, x < y);

isBST[Nat](treeEx)(numcomp)

