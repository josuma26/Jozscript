
type Tree := {leaf:Nat, node:[Nat*Tree*Tree]};
type List := {nil: Unit, cons:[Nat*List]};

def append(l1: List, l2: List): List := {
    match l1 with {
        | nil:u => l2
        | cons:[first, rest] => cons:[first, append(rest)(l2)] as List
    }
};

def tree2list(tree: Tree): List := {
    match tree with {
        |leaf:n => cons:[n, nil:unit as List] as List
        | node:[n, left, right] => cons:[n, append(tree2list(left))(tree2list(right))] as List
    }
};
def sumTree(t:Tree): Nat := {
    match t with {
        | leaf:n => n
        | node:[n, left, right] => n + sumTree(left) + sumTree(right)
    }
};

tree2list(node:[2, leaf:1 as Tree, leaf:1 as Tree] as Tree)