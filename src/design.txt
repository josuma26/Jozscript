Need:
- Enhance language with sums, products (including pattern matching and projections)
- Adding recursive functions, types
- Adding subtyping, polymorphism
- Statements
- Hoare logic
- Theorem proving for generated theorems
- Lexing, parsing

let x: Bool := ...
match x with {
    | true => true
    | false => false
type Tree<T> :=
    | leaf: Tree<T>
    | node: T -> Tree<T> -> Tree<T> -> Tree<T>

